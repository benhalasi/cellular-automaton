/*
* This Java source file was generated by the Gradle 'init' task.
*/
package io.benph.sp.cellsim;

import java.awt.Color;
import java.io.IOException;
import java.nio.file.Path;

import io.benph.sp.cellsim.algos.conways.Conways;
import io.benph.sp.cellsim.algos.conways.ConwaysCell;
import io.benph.sp.cellsim.algos.tcc.TriColorConwaysCell;
import io.benph.sp.cellsim.grid.Grid;
import io.benph.sp.cellsim.grid.Utils;
import io.benph.sp.cellsim.runner.Runner;

public class App {
  public static void main(String[] args) throws IOException {
    // int h = 2160;
    // var grid = new Grid<ConwaysCell>(3840, h, true);
    int h = 1080;
    int w = 1920;
    float radius = 1.5f;
    var grid = conwaysGrid(h, w);
    // var grid = triColorConwaysGrid(h, w);
    System.out.println("neighbours (" + Utils.getNCircle(radius).size() + ")");

    grid.calcNeighbours(
        radius,
        size -> new ConwaysCell[size],
        c -> {
          if (c % 100 == 0)
            System.out.println(String.format(" : %.2f", (float) c / h));
        });

    System.out.println("runner");
    // var runner = new Runner<>(grid, new
    // TriColorConways(Utils.getNCircle(radius).size(), radius));
    var runner = new Runner<>(grid, new Conways(), Path.of("/home/b/Desktop/cellular-automaton/export"));
    runner.initDestination();

    System.out.println("start sim.");
    for (int s = 0; s < 15 * 60; s++) {
      long ts = System.currentTimeMillis();
      for (int i = 0; i < 10; i++) {
        runner.iterate();
        System.out.print(".");
      }
      System.out.println("!");
      System.out.println("simmed   second (" + s / 10 + ") in " + (System.currentTimeMillis() - ts) + " ms");
      runner.dump();
      System.out.println("exported second (" + s / 10 + ") in " + (System.currentTimeMillis() - ts) + " ms");
    }
  }

  private static Grid<ConwaysCell> conwaysGrid(int h, int w) {
    var grid = new Grid<ConwaysCell>(w, h, false);
    System.out.println("init");
    grid.init(
        (x, y) -> {
          boolean random = Math.random() < .8;
          boolean pattern = (x + y) % 3 == 0;
          boolean xPosConstraint = h / 3 < y && y < 2 * h / 3;
          boolean yPosConstraint = w / 3 < x && x < 2 * w / 3;
          return new ConwaysCell(x, y, random && pattern && xPosConstraint && yPosConstraint);
        });
    return grid;
  }

  private static Grid<TriColorConwaysCell> triColorConwaysGrid(int h, int w) {
    var grid = new Grid<TriColorConwaysCell>(w, h, false);
    System.out.println("init");
    grid.init((x, y) -> {
      TriColorConwaysCell triColorConwaysCell = new TriColorConwaysCell(x, y);
      var f = Math.random();
      if (f < .2d) {
        triColorConwaysCell.setColor(Color.RED);
      } else if (f < .4d) {
        triColorConwaysCell.setColor(Color.GREEN);
      } else if (f < .6d) {
        triColorConwaysCell.setColor(Color.BLUE);
      }
      return triColorConwaysCell;
    });
    return grid;
  }
}
